# Dockerfile.centos8 - CentOS 8 build environment for Xpra
FROM centos:8

ENV LANG en_US.UTF-8
ENV LC_ALL en_US.UTF-8

# Switch to CentOS 8 vault mirrors for EOL support
RUN sed -i 's|mirrorlist=|#mirrorlist=|g' /etc/yum.repos.d/CentOS-*.repo \
    && sed -i 's|#baseurl=|baseurl=|g' /etc/yum.repos.d/CentOS-*.repo \
    && sed -i 's|http://mirror.centos.org|http://vault.centos.org|g' /etc/yum.repos.d/CentOS-*.repo

# Fix CentOS 8 repo URLs to use vault.centos.org and enable baseurl
RUN sed -i 's/mirror.centos.org/vault.centos.org/g' /etc/yum.repos.d/CentOS-*.repo \
    && sed -i 's/^#.*baseurl=http/baseurl=http/g' /etc/yum.repos.d/CentOS-*.repo \
    && sed -i 's/^mirrorlist=http/#mirrorlist=http/g' /etc/yum.repos.d/CentOS-*.repo

# Enable EPEL for extra packages
RUN dnf -y install epel-release

# Install essential build tools and libraries
RUN dnf -y install \
    git python3 python3-pip python3-setuptools python3-wheel python3-devel \
    make gcc gcc-c++ libX11-devel libXtst-devel libXcomposite-devel libXdamage-devel \
    libXrandr-devel libXfixes-devel libXinerama-devel libXrender-devel \
    libXext-devel libXi-devel libXScrnSaver-devel libXv-devel libXpm-devel \
    libjpeg-turbo-devel libpng-devel libwebp-devel \
    opus-devel openssl-devel lz4-devel nss-devel \
    wget fuse squashfs-tools desktop-file-utils ImageMagick ImageMagick-devel \
    jq cmake

# Install clang from repository (if missing, llvm from Linuxbrew will be used)
#RUN dnf -y install \
#    clang

# More dependencies (which are not too old in CentOS 8)
# These are stable, mature libraries that should be installed from the system repo.
# Some are too old or missing, we'll use Linuxbrew (see build_env.sh for details)
# Error: Unable to find a match: python3-cairo-devel python3-gobject-devel
# Error: Unable to find a match: libXres-devel
# -----------------------------------------------------------------------------
RUN dnf -y install \
    git python3 python3-pip python3-setuptools python3-wheel python3-devel \
    make gcc gcc-c++ pkgconfig \
    libX11-devel libXtst-devel libXcomposite-devel libXdamage-devel \
    libXrandr-devel libXfixes-devel libXinerama-devel libXrender-devel \
    libXext-devel libXi-devel libXScrnSaver-devel libXv-devel libXpm-devel \
    libjpeg-turbo-devel libpng-devel libwebp-devel \
    opus-devel openssl-devel lz4-devel nss-devel \
    wget fuse squashfs-tools desktop-file-utils ImageMagick ImageMagick-devel \
    jq \
    cairo-devel pango-devel gtk3-devel gdk-pixbuf2-devel \
    gobject-introspection-devel \
    perl-ExtUtils-Command perl-ExtUtils-MakeMaker

# X11 development libraries (for xpra build and runtime)
# -----------------------------------------------------------------------------
# NOTE: Some X11 protocol headers in CentOS 8 are too old for modern builds.
# For example, fixesproto.pc from xorg-x11-proto-devel is version 5.0, but
# xpra and other modern software require fixesproto >= 6.0.
# For newer headers, we use Linuxbrew X11 packages
# See USE_BREW_HEADERS_LIBS=1
RUN dnf -y install \
    libX11-devel \
    libXtst-devel \
    libXcomposite-devel \
    libXdamage-devel \
    libXrandr-devel \
    libXfixes-devel \
    libXinerama-devel \
    libXrender-devel \
    libXext-devel \
    libXi-devel \
    libXScrnSaver-devel \
    libXv-devel \
    libXpm-devel \
    libXcursor-devel \
    libXau-devel \
    libxcb-devel \
    mesa-libGL-devel \
    mesa-libEGL-devel \
    mesa-libGLU-devel \
    xorg-x11-proto-devel

# -----------------------------------------------------------------------------
# X11 protocol headers and libraries via Homebrew (Linuxbrew)
# If USE_BREW_HEADERS_LIBS=1, install and use these exclusively for modern builds
# -----------------------------------------------------------------------------
# (This is handled in build_env.sh, not here, but documented for clarity)
# Example: USE_BREW_HEADERS_LIBS=1 will trigger brew install of:
#   xorgproto libx11 libxext libxfixes libxdamage libxrandr libxcomposite libxinerama libxrender libxi libxpm libxv libxkbfile libxcursor libxcb libxau libxdmcp libxres
# The build scripts will set PKG_CONFIG_PATH, LDFLAGS, and CPPFLAGS accordingly.

# Install xxhash from source (not available in CentOS 8 repos)
RUN cd /tmp && \
    wget -q https://github.com/Cyan4973/xxHash/archive/refs/tags/v0.8.2.tar.gz && \
    tar -xzf v0.8.2.tar.gz && \
    cd xxHash-0.8.2 && \
    make && \
    make install && \
    rm -rf /tmp/xxHash-0.8.2 /tmp/v0.8.2.tar.gz && \
    ldconfig

# Set umask globally for all users (group-writable files/dirs)
RUN echo 'umask 0002' >> /etc/profile.d/umask.sh && chmod +x /etc/profile.d/umask.sh

# Create a non-root user for building and make workspace directory writable
# If mounted on the host, note that subdirs created in this workspace
# will be owned by a non-existing uid on the host.
RUN useradd -m builder
RUN mkdir -p /workspace/xpra
RUN chown builder /workspace/xpra
WORKDIR /workspace/xpra

# Create user for Linuxbrew - AFTER build user (which should get the first uid)
RUN useradd -m linuxbrew
RUN usermod -aG linuxbrew builder && chmod -R g+rwX /home/linuxbrew/
# Install Linuxbrew
RUN su - linuxbrew -c 'NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"'
ENV PATH="/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:${PATH}"
ENV HOMEBREW_PREFIX="/home/linuxbrew/.linuxbrew"
ENV HOMEBREW_CELLAR="/home/linuxbrew/.linuxbrew/Cellar"
ENV HOMEBREW_REPOSITORY="/home/linuxbrew/.linuxbrew"
ENV HOMEBREW_NO_ANALYTICS=1
ENV HOMEBREW_NO_AUTO_UPDATE=1
ENV HOMEBREW_NO_ENV_HINTS=1
# Fix permissions and ACLs for all existing and future files/dirs
RUN chown -R linuxbrew:linuxbrew /home/linuxbrew/.linuxbrew && \
    chmod -R g+rwX /home/linuxbrew/.linuxbrew && \
    find /home/linuxbrew/.linuxbrew -type d -exec chmod g+s {} + && \
    setfacl -R -m d:g:linuxbrew:rwx /home/linuxbrew/.linuxbrew && \
    setfacl -R -m g:linuxbrew:rwx /home/linuxbrew/.linuxbrew
# This should allow us to use Linuxbrew packages without having to build them
# because we're using the default Linuxbrew prefix.

# Cache busting argument - change this to invalidate cache for script copies
ARG CACHE_BUST=1
RUN echo "Cache busting at $(date +%s) with value: $CACHE_BUST"

# Copy all scripts, archives, and requirements.txt to /var/tmp
COPY *.sh *.zip *.tar.* requirements.txt /var/tmp/

# Copy only scripts to /usr/local/bin and set executable
RUN cp /var/tmp/*.sh /usr/local/bin/ && chmod +x /usr/local/bin/*.sh
COPY linuxdeploy-*.AppImage /workspace/xpra/

# Optionally copy xpra source archives to workspace if present
RUN cp /var/tmp/xpra-*.zip /workspace/xpra/ 2>/dev/null || true
RUN cp /var/tmp/xpra-*.tar.* /workspace/xpra/ 2>/dev/null || true

# Pre-create the Python virtual environment at build time (idempotent)
# TODO fix entrypoint, maybe add sudo (to install things in shell mode manually)
USER builder
RUN /usr/local/bin/build_env.sh || true

ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]
